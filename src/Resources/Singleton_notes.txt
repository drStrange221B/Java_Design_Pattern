Design:
1) Class is responsible for lifecycle
2) Static in nature but not use with static class because it need to be thread safe.
3) Private instance of the singleton class
4) private constructor for the singleton class
5) No parameters required for Construction -> with parameter will be factory pattern that violates Singleton rule


Schema:

                         Singleton
                  - singleton: Singleton
                  - Singleton90
                  + getInstance():Singleton

-       private
+       public


                Everyday Example - Runtime Env

Runtime singletonRuntime = Runtime.getRuntime();
singletonRuntime.gc();
System.out.println(singletonRuntime);
Runtime anotherInstance = Runtime.getRuntime();
System.out.println(anotherInstance);
if(singletonRuntime == anotherInstance)
{
    System.out.println("They are the same instance");

}

Pitfalls
1) often overused
2) Difficult to unit test
3) if not careful, not thread-safe
4) sometimes confused for Factory as the getInstance() method started to take parameters
5) java.util.Calendar is Not a Singleton but instead it is Prototype


                    Difference between Singleton and Factory

        Singleton                                                           Factor
1) Returns same instance                                | 1) Returns various instances of various type
2) One Constructor method - not args                    | 2) Multiple constructors
3) No Interface (as it is private constructor and       | 3) Interface driven - abstract out backend
    private instance, interface is not introduced)      | 4) easy to unit test
                                                        | 5) Adaptable to environment more easily




